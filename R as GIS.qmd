---
title: "Using R as a Geographic Information System"
author: "Toyin Ola"
format:
  revealjs: 
    width: 1920
    height: 1080
    theme: [default, custom.scss]
code-fold: false
code-overflow: wrap
params:
  state: "AZ"
execute:
  eval: false
  echo: true
  warning: false
  include: true
  cache: false
---

## Why use R as a GIS?

![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/reproducibility_court.png)

## Example: Finding Maternity Care Deserts

Consider what steps you would have to take if you wanted to see which parts of `r params$state` do not have a hospital with inpatient labor and delivery (L&D) units within a 45-minute drive.

:::{.incremental}

- [x] Obtain a list of hospitals with L&D.
- [x] Geocode hospital addresses.
- [x] Obtain `r params$state` geographic boundaries.
- [x] Determine a 45-minute radius around each hospital.
- [x] Visualize the results.

:::

## Set Up

|Package|Purpose|
|-------|--------|
|jsonlite | Query CMS API to obtain data on hospitals|
|tidygeocoder | Geocode hospital addresses |
|dplyr | Wrangle data |
|stringr| Use text data to filter data|
|tigris | Download Census Bureau TIGER/Line geographic boundaries |
|sf | Manipulate geosptial data |
|hereR*| Query HERE API to determine 45-minute driving radius |
|mapview| Visualize geospatial data quickly |
|leaflet | Generate interactive geospatial visualizations |

*A [free API key](https://platform.here.com/access/) is required to use this package.

::: {.callout-note  appearance="simple"}

## Custom Function
To help query the HERE API, there is one user-defined function to source (courtesy of [Hannah Recht](https://www.hrecht.com/r-drive-time-analysis-tutorial/tutorial.html)). 

:::

```{r presenter set up}
#| eval: true
#| echo: false
#| include: false

# Source script with function to query HERE API

source("function.R")

# List and load primary packages

packages <- c("sf", "dplyr", "leaflet")

invisible(lapply(packages, library, character.only = TRUE))

```

## Step 1

Obtain a list of `r params$state` hospitals with L&D from the CMS [Provider Data Catalog](https://data.cms.gov/provider-data/dataset/nrdb-3fcy). Determine which hospitals do **not** have L&D.


:::{.panel-tabset}

### Code

```{r}

# Query CMS Provider Data Catalog

query <- paste0(
  "https://data.cms.gov/provider-data/api/1/datastore/query/nrdb-3fcy/0",
  "?conditions[0][property]=State&conditions[0][value]=", params$state,
  "&conditions[0][operator]=="
)
  
raw <- jsonlite::fromJSON(query)
  
hospital_df <- raw$results

# Identify hospitals w/out L&D

no_inpatient <- hospital_df |>  
  filter(stringr::str_detect(score, "does not provide inpatient labor")) |> 
  distinct(facility_id, .keep_all = TRUE) |> 
  select(c(facility_id, facility_name)) 

```

::: aside

Check [DKAN API documentation](https://dkan.readthedocs.io/en/latest/user-guide/guide_api.html) for filtering options.

:::

### Raw Results

```{r presenter load hospital data}
#| eval: true
#| echo: false
#| include: true

# Get hospital data

hospital_df <- read.csv("data/az_data.csv") |> 
  select(-c(X)) # remove column added when saving CSV

# Identify hospitals w/out L&D

no_inpatient <- hospital_df |>  
  filter(stringr::str_detect(score, "does not provide inpatient labor")) |> 
  distinct(facility_id, .keep_all = TRUE) |> 
  select(c(facility_id, facility_name)) 

# Preview df

head(no_inpatient)

```

:::

## Step 2

Geocode the hospitals addresses and turn into a geospatial dataset.

:::{.panel-tabset}

### Code

```{r}

# Filter and reformat hospital data

hospital_df <- hospital_df |> 
  mutate(inpatient = case_when(facility_id %in% no_inpatient$facility_id  ~ "No",
                               .default = "Yes")) |> 
  mutate(full_address = paste0(address, ", ", citytown, ", ", state, " ", zip_code),
         .after = zip_code) |> 
  select(-c(telephone_number:end_date))

# Geocode hospital addresses

hospital_df <- hospital_df |> 
  tidygeocoder::geocode(address = full_address, method = "arcgis") 

# Convert to sf object

hospitals <- hospital_df |>
  st_as_sf(coords = c("long", "lat"), 
           crs = 4326) # use {leaflet} preferred CRS

# Preview for quick QC

mapview::mapview(hospitals)

```

### Results

```{r presenter load hospital sf}
#| eval: true
#| echo: false
#| include: true

# Load GPKG with hospital sf

hospitals <- st_read(dsn = "data/az_sf.gpkg",
                        layer = "hospitals", 
                        quiet = TRUE) |> 
  st_transform(crs = 4326)

# Create a quick QC viz

mapview::mapview(hospitals)

```

:::

## Step 3

Obtain `r params$state` county boundaries.

:::{.panel-tabset}

### Code

```{r}

# Download county boundaries 

counties <- counties(state = c(params$state), 
                     cb = TRUE, 
                     resolution = "500k", 
                     year = 2023) 

# Reproject to {leaflet} preferred CRS

counties <- counties |> 
  st_transform(crs = 4326)

# Create a quick QC viz

mapview::mapview(counties)

```

### Results

```{r presenter load counties sf}
#| eval: true
#| echo: false
#| include: true

# Load GPKG with counties sf

counties <- st_read(dsn = "data/az_sf.gpkg",
                        layer = "az_data", 
                        quiet = TRUE) |> 
  st_transform(crs = 4326)

# Create a quick QC viz

mapview::mapview(counties)

```

:::

## Step 4

Query the HERE API to determine a 45-minute driving radius ([isochrone](https://en.wikipedia.org/wiki/Isochrone_map)) around each hospital.

::: {.callout-tip  appearance="simple"}

## Try it Yourself
If you want to try it out without signing up for a HERE API key, use the data available on [GitHub](https://github.com/toylyol/iarug-gis).

:::

:::{.panel-tabset}

### Code

::: aside

Store API key in [.Renviron file](https://laurenilano.com/posts/api-keys/) for ease and security.

:::

```{r query HERE API}

# Set HERE API key

set_key(Sys.getenv("HERE_API_KEY"))

# Loop over points to make isochrones file

## create empty vectors for loop output

isochrones <- vector(mode = "list", length = nrow(hospitals))
error_rows <- vector(mode = "list", length = nrow(hospitals))

for (i in 1:nrow(hospitals)) {
  
    print(i)
  
    ## get isochrone for that point, using delay to avoid rate limiting
    Sys.sleep(0.9)
    
    ## filter to ith point
    point_temp <- hospitals %>% filter(row_number() == i)
    point_id <- point_temp$facility_id
    
    isochrones_temp <- tryLocation(point_temp)
    
    ## save any errored out points
    if (is.null(isochrones_temp)) {
        error_rows <- bind_rows(error_rows, point_temp)
    } else {
        isochrones <- bind_rows(isochrones, isochrones_temp)    
    }
}

# Remove extraneous columns

isochrones <- isochrones |> 
  select(facility_id, geometry)

# Reproject

isochrones <- isochrones |> 
  st_transform(crs = 4326)

# Preview

mapview::mapview(isochrones)

```

### Results

```{r}
#| eval: true
#| echo: false
#| include: true

```

:::

## Step 5

Visualize the hospitals and isochrones in an interactive map.

:::{.panel-tabset}

### Code

```{r}

# Create negation operator

`%not_in%` <- Negate( `%in%` )  

# Reproject to {leaflet} preferred CRS

hospitals <- hospitals |> 
  sf::st_transform(crs = 4326) 

isochrones <- isochrones |> 
  sf::st_transform(crs = 4326) 

# Subset data

ip_hospitals <- hospitals |> 
  filter(facility_name %not_in% inpatient) 

ip_isochrones <- isochrones |> 
  filter(facility_name %not_in% inpatient) 

# TODO: Use sf::st_intersection() to isolate isochrones that fall within test region. 

# Specify text for popups

hosp_popup <- paste0(
  "<b>", ip_hospitals$facility_name, "</b>", "<br/>",
  ip_hospitals$full_address
)

iso_popup <- paste0(
  "This is a 45-minute driving radius around ", ip_isochrones$facility_name, "."
)

# Make an interactive map

leaflet() %>%
  addProviderTiles("CartoDB.Voyager") %>%    # add base map
  addMarkers(data = ip_hospitals, 
             group = ip_hospitals$facility_name,
             popup = ~hosp_popup) %>%
  addPolygons(data = ip_isochrones,
              weight = 1, opacity = 1.0,     # set stroke width and opacity
              stroke = TRUE,
              fillOpacity = 0.25, 
              group = ip_isochrones$facility_name,
              popup = ~iso_popup,
              highlightOptions = highlightOptions(color = "#000000", weight = 2,
                                                  bringToFront = TRUE)
  ) %>%
  addLayersControl(
    overlayGroups = c(ip_isochrones$facility_name, ip_hospitals$facility_name),
    options = layersControlOptions(collapsed = FALSE)
  ) 

# TODO: Add county boundaries as a layer.

```

### Results

```{r}
#| eval: true
#| echo: false
#| include: true
```

:::

## Possibilities


## Learn More

Here are some resources I have found helpful translating knowledge from a GIS like QGIS to R:

- [*Geocomputation with R*](https://r.geocompx.org/) (great to get a solid foundation)

- [Yan Holtz' R Graph Gallery](https://r-graph-gallery.com/328-hexbin-map-of-the-usa.html) (many geosptial data viz tutorials are available, including the popular hexbin map)

- [R for the Rest of Us' Mapping with R](https://rfortherestofus.com/courses/mapping/) (not free, but very helpful for learning many ways to visualize geospatial data in R)

- [*Analyzing US Census Data: Methods, Maps, and Models in R*](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html) (especially Chapter 7) 

- [*Hands-On Spatial Data Science with R*](https://spatialanalysis.github.io/handsonspatialdata/index.html) (great for GeoDa users)

- [UChicago Center for Spatial Data Science Tutorials](https://spatialanalysis.github.io/tutorials/) (also great for GeoDa users)

- [Josiah Perry's Hot Spot Analysis Tutorial](https://www.youtube.com/watch?v=OnMNZwJywjs) (a great overview of the underlying spatial statistics, even if you don't use the {sfdep} package)


```{r resources}
#| echo: false

# https://stackoverflow.com/questions/79049572/how-to-use-font-awesome-icons-as-bullet-points-in-quarto-revealjs-presentation

# https://stackoverflow.com/questions/78646332/font-awesome-doesnt-change-bullet-points-in-revealjs-quarto

# https://docs.fontawesome.com/web/style/lists

# https://jsfiddle.net/VR2hP/

# https://quarto.org/docs/computations/execution-options.html#fenced-echo

# https://www.andreashandel.com/posts/2023-06-13-custom-callouts-quarto/

# https://emilhvitfeldt.com/post/slidecraft-colors-fonts/

# https://quarto.org/docs/presentations/revealjs/themes.html

# https://stackoverflow.com/questions/74362331/inside-chunk-quarto-codes-not-working-properly

# https://stackoverflow.com/questions/74437799/how-to-make-quarto-revealjs-presentation-text-full-width

# https://stackoverflow.com/questions/64002239/huge-left-margin-in-reveal-js

# https://github.com/quarto-dev/quarto-cli/discussions/2337

# https://github.com/quarto-dev/quarto-cli/discussions/11318

# https://quarto.org/docs/presentations/revealjs/advanced.html#presentation-size

# customize callouts: https://github.com/quarto-dev/quarto-cli/discussions/4755

# create grid div: https://github.com/quarto-dev/quarto-cli/discussions/9029

# creating listing page grid and scaling slides: https://github.com/quarto-dev/quarto-cli/discussions/1840

# https://www.garrickadenbuie.com/blog/sharing-xaringan-slides/#the-perfect-share-image-ratio

# https://emilhvitfeldt.com/post/slidecraft-layout/

# https://www.reddit.com/r/Rlanguage/comments/1ib49cg/how_to_align_content_of_my_slides_to_the_top_in/

# https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/

# TODO: Customize callout background color using CSS.
# TODO: Figure out how to add listing page-style grid with images of other other GIS outputs.
# TODO: Left align markdown table.

```

