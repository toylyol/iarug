---
title: "Using R as a Geographic Information System"
author: "Toyin Ola"
format:
  revealjs: 
    width: 1920
    height: 1080
    theme: [default, custom.scss]
    self-contained: true
code-fold: false
code-overflow: wrap
params:
  state: "AZ"
execute:
  eval: false
  echo: true
  warning: false
  include: true
  cache: false
---

## Why use R as a GIS?

![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/reproducibility_court.png)

## Example: Finding Maternity Care Deserts

Consider what steps you would have to take if you wanted to see which parts of `r params$state` do not have a hospital with inpatient labor and delivery (L&D) units within a 45-minute drive.

:::{.incremental}

1. Obtain a list of hospitals with L&D.
2. Geocode hospital addresses.
3. Determine a 45-minute radius around each hospital.
4. Obtain `r params$state` geographic boundaries.
5. Visualize the results.

:::

## Set Up

:::: {.columns}

::: {.column width="90%"}

|Package|   |Purpose|
|-------|---|--------|
|jsonlite | | Query CMS API to obtain data on hospitals|
|tidygeocoder | | Geocode hospital addresses|
|dplyr | | Wrangle data|
|stringr| | Use text to filter data|
|tigris | | Download Census Bureau TIGER/Line geographic boundaries|
|sf | | Manipulate geosptial data|
|hereR | | Query HERE API to determine 45-minute driving radius|
|mapview | | Visualize geospatial data quickly|
|leaflet | | Generate interactive geospatial visualizations|

::: {.callout-note  appearance="simple"}

To help query the HERE API, there is one user-defined tryLocation() function to source. This function is courtesy of [Hannah Recht](https://www.hrecht.com/r-drive-time-analysis-tutorial/tutorial.html). 

:::

<br>

::: aside
*A [free API key](https://platform.here.com/access/) is required to use {hereR} package.*
:::

:::

:::{.column width="10%"}
:::

::::

```{r presenter set up}
#| eval: true
#| echo: false
#| include: false

# Source script with function to query HERE API

source("function.R")

# List and load primary packages

packages <- c("sf", "dplyr", "leaflet")

invisible(lapply(packages, library, character.only = TRUE))

```

## Step 1

Obtain a list of `r params$state` hospitals with L&D from the CMS [Provider Data Catalog](https://data.cms.gov/provider-data/dataset/nrdb-3fcy). Determine which hospitals do **not** have L&D.


:::{.panel-tabset}

### Code

```{r obtain hospital list}

# Query CMS Provider Data Catalog

query <- paste0(
  "https://data.cms.gov/provider-data/api/1/datastore/query/nrdb-3fcy/0",
  "?conditions[0][property]=State&conditions[0][value]=", params$state,
  "&conditions[0][operator]=="
)
  
raw <- jsonlite::fromJSON(query)
  
hospital_df <- raw$results

# Identify hospitals w/out L&D

no_inpatient <- hospital_df |>  
  filter(stringr::str_detect(score, "does not provide inpatient labor")) |> 
  distinct(facility_id, .keep_all = TRUE) |> 
  select(c(facility_id, facility_name)) 

# Preview 

head(hospital_df)

head(no_inpatient)
  
```

::: aside

*Check [DKAN API documentation](https://dkan.readthedocs.io/en/latest/user-guide/guide_api.html) for filtering options.*

:::

### Raw Hospital Results

```{r presenter load hospital data}
#| eval: true
#| echo: false
#| include: true

# Get hospital data

hospital_df <- read.csv("data/az_data.csv") |> 
  select(-c(X)) # remove column added when saving CSV

# Identify hospitals w/out L&D

no_inpatient <- hospital_df |>  
  filter(stringr::str_detect(score, "does not provide inpatient labor")) |> 
  distinct(facility_id, .keep_all = TRUE) |> 
  select(c(facility_id, facility_name)) 

# Preview df

head(hospital_df)

```

### Hospitals without L&D

```{r presenter preview no IP}
#| eval: true
#| echo: false
#| include: true

# Preview

head(no_inpatient)

```

:::

## Step 2

Geocode the hospitals addresses and turn into a geospatial dataset.

:::{.panel-tabset}

### Code

```{r geocode}

# Filter and reformat hospital data

hospital_df <- hospital_df |> 
  distinct(facility_id, .keep_all = TRUE) |> 
  mutate(inpatient = case_when(facility_id %in% no_inpatient$facility_id  ~ "No",
                               .default = "Yes")) |> 
  mutate(full_address = paste0(address, ", ", citytown, ", ", state, " ", zip_code),
         .after = zip_code) |> 
  select(-c(telephone_number:end_date))

# Geocode hospital addresses

hospital_df <- hospital_df |> 
  tidygeocoder::geocode(address = full_address, method = "arcgis") 

# Convert to sf object

hospitals <- hospital_df |>
  st_as_sf(coords = c("long", "lat"), 
           crs = 4326) # use {leaflet} preferred CRS

# Preview for quick QC

mapview::mapview(hospitals)

```

### Results

```{r presenter load hospital data and sf}
#| eval: true
#| echo: false
#| include: true

# Load geocoded hospital data

hospital_df <- read.csv("data/az_data_geocoded.csv") |> 
  select(-c(X)) 

# Load GPKG with hospital sf

hospitals <- st_read(dsn = "data/az_sf.gpkg",
                        layer = "hospitals", 
                        quiet = TRUE) 

# Create a quick QC viz

mapview::mapview(hospitals)

```

:::

## Step 3

Query the HERE API to determine a 45-minute driving radius (i.e., [isochrone](https://en.wikipedia.org/wiki/Isochrone_map)) around each hospital.

:::{.panel-tabset}

### Code

::: aside

*Store API key in [.Renviron file](https://laurenilano.com/posts/api-keys/) for ease and security.*

:::

```{r obtain isochrones}

# Set HERE API key

set_key(Sys.getenv("HERE_API_KEY"))

# Loop over point data to make isochrones file (using Hannah Recht's function)

## select hospitals w/ L&D

ip_hospitals <- hospitals |> 
  filter(inpatient == "Yes")

## create empty vectors for loop output

isochrones <- vector(mode = "list", length = nrow(ip_hospitals))
error_rows <- vector(mode = "list", length = nrow(ip_hospitals))

for (i in 1:nrow(ip_hospitals)) {
  
    print(i)
  
    ## get isochrone for that point, using delay to avoid rate limiting
    Sys.sleep(0.9)
    
    ## filter to ith point
    point_temp <- ip_hospitals %>% filter(row_number() == i)
    point_id <- point_temp$facility_id
    
    isochrones_temp <- tryLocation(point_temp)
    
    ## save any errored out points
    if (is.null(isochrones_temp)) {
        error_rows <- bind_rows(error_rows, point_temp)
    } else {
        isochrones <- bind_rows(isochrones, isochrones_temp)    
    }
}

# Remove extraneous columns

isochrones <- isochrones |> 
  select(facility_id, geometry)

# Left join hospital data

ip_hospitals <- ip_hospitals |> 
  select(c(facility_id, facility_name, full_address, inpatient)) |> 
  st_drop_geometry()

isochrones <- isochrones |> 
  left_join(ip_hospitals, by = join_by(facility_id))

# Reproject

isochrones <- isochrones |> 
  st_transform(crs = 4326)

# Preview

mapview::mapview(isochrones)

```

::: {.callout-tip  appearance="simple"}

If you want to try it out without signing up for a HERE API key, use the data available on [GitHub](https://github.com/toylyol/iarug-gis).

:::

### Results

```{r presenter load isochrones}
#| eval: true
#| echo: false
#| include: true

# Load IP hospitals' isochrones

isochrones <- st_read(dsn = "data/az_sf.gpkg",
                        layer = "isochrones", 
                        quiet = TRUE) 

# Preview

mapview::mapview(isochrones)

```

:::

## Step 4

Obtain `r params$state` county boundaries.

:::{.panel-tabset}

### Code

```{r obtain county boundaries}

# Download county boundaries 

counties <- counties(state = c(params$state), 
                     cb = TRUE, 
                     resolution = "500k", 
                     year = 2023) 

# Reproject to {leaflet} preferred CRS

counties <- counties |> 
  st_transform(crs = 4326)

# Create a quick QC viz

mapview::mapview(counties)

```

### Results

```{r presenter load counties sf}
#| eval: true
#| echo: false
#| include: true

# Load GPKG with counties sf

counties <- st_read(dsn = "data/az_sf.gpkg",
                        layer = "counties", 
                        quiet = TRUE) 
# Create a quick QC viz

mapview::mapview(counties)

```

:::

## Step 5

Visualize the hospitals and isochrones in an interactive map.

:::{.panel-tabset}

### Code

```{html}
#| results: markup 

# Use HTML to format text for hospital popup

hosp_popup <- paste0(
  "<b>", hospitals$facility_name, "</b>", "<br/>",
  hospitals$full_address
)

```

<br>

```{r create leaflet map}

# Specify text for isochrone popup

iso_popup <- paste0(
  "This is a 45-minute driving radius around ", isochrones$facility_name, "."
)

# Create color palette

color_icon <- awesomeIcons(
  icon = 'location-dot',
  iconColor = 'black',
  library = 'fa',
  markerColor = ifelse(hospitals$inpatient == 'Yes', 'green', 'gray')) # no HEX codes

# Make an interactive map

leaflet() %>%
  addProviderTiles("CartoDB.Voyager") %>%    # add base map
  addPolygons(data = counties,
              weight = 1,
              color = "#999999",
              fillColor = "#d4d4d4",
              stroke = TRUE,
              popup = paste0(counties$NAME)) %>%
  addAwesomeMarkers(data = hospitals, 
             icon = color_icon,
             group = hospitals$facility_name,
             popup = ~hosp_popup) %>%
  addPolygons(data = isochrones,
              weight = 1, opacity = 1.0,     # set stroke width and opacity
              stroke = TRUE,
              color = "#669933",
              fillColor = "#669933", 
              fillOpacity = 0.5, 
              group = isochrones$facility_name,
              popup = ~iso_popup,
              highlightOptions = highlightOptions(color = "#527c29",
                                                  weight = 3,
                                                  bringToFront = TRUE)
  ) %>%
  addLayersControl(
    overlayGroups = sort(c(isochrones$facility_name, hospitals$facility_name)),
    options = layersControlOptions(collapsed = TRUE)
  ) 

```

### Results

```{r presenter generate leaflet map}
#| eval: true
#| echo: false
#| include: true

# Specify text for popups

hosp_popup <- paste0(
  "<b>", hospitals$facility_name, "</b>", "<br/>",
  hospitals$full_address
)

iso_popup <- paste0(
  "This is a 45-minute driving radius around ", isochrones$facility_name, "."
)

# Create color palette

color_icon <- awesomeIcons(
  icon = 'location-dot',
  iconColor = 'black',
  library = 'fa',
  markerColor = ifelse(hospitals$inpatient == 'Yes', 'green', 'gray')) # no HEX codes

# Make an interactive map

leaflet() %>%
  addProviderTiles("CartoDB.Voyager") %>%    # add base map
  addPolygons(data = counties,
              weight = 1,
              color = "#999999",
              fillColor = "#d4d4d4",
              stroke = TRUE,
              popup = paste0(counties$NAME)) %>%
  addAwesomeMarkers(data = hospitals, 
             icon = color_icon,
             group = hospitals$facility_name,
             popup = ~hosp_popup) %>%
  addPolygons(data = isochrones,
              weight = 1, opacity = 1.0,     # set stroke width and opacity
              stroke = TRUE,
              color = "#669933",
              fillColor = "#669933", 
              fillOpacity = 0.5, 
              group = isochrones$facility_name,
              popup = ~iso_popup,
              highlightOptions = highlightOptions(color = "#527c29",
                                                  weight = 3,
                                                  bringToFront = TRUE)
  ) %>%
  addLayersControl(
    overlayGroups = sort(c(isochrones$facility_name, hospitals$facility_name)),
    options = layersControlOptions(collapsed = TRUE)
  ) 

```

:::

## Possibilities {style='text-align: center;'}

::: {.r-stack}

![](images/ggplot2-hexbin-map.png){.fragment .fade-in-then-out .scaled-larger-image}

![](images/tmap-low-access-choropleth.png){.fragment .fade-in-then-out .scaled-image}

![](images/ggplot2-low-access-Gi-star-clusters.png){.fragment .fade-in-then-out .scaled-image}

![](images/flexdashboard-bakery-map.png){.fragment .fade-in-then-out .scaled-image}
:::

## Learn More

Here are some resources I have found helpful translating knowledge from a GIS like QGIS to R:

- [*Geocomputation with R*](https://r.geocompx.org/) (great to get a solid foundation)

- [Yan Holtz' R Graph Gallery](https://r-graph-gallery.com/328-hexbin-map-of-the-usa.html) (many geosptial data viz tutorials are available, including the popular hexbin map)

- [R for the Rest of Us' Mapping with R](https://rfortherestofus.com/courses/mapping/) (not free, but wonderful for learning many ways to visualize geospatial data in R)

- [*Analyzing US Census Data: Methods, Maps, and Models in R*](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html) (especially Chapter 7) 

- [*Hands-On Spatial Data Science with R*](https://spatialanalysis.github.io/handsonspatialdata/index.html) (great for GeoDa users)

- [UChicago Center for Spatial Data Science Tutorials](https://spatialanalysis.github.io/tutorials/) (also great for GeoDa users)

- [Josiah Perry's Hot Spot Analysis Tutorial](https://www.youtube.com/watch?v=OnMNZwJywjs) (a helpful overview of the underlying spatial statistics, even if you don't use the {sfdep} package)

```{r resources}
#| echo: false

# customizing font color in SCSS: https://emilhvitfeldt.com/post/slidecraft-colors-fonts/

# customizing theme in SCSS: https://quarto.org/docs/presentations/revealjs/themes.html

# creating custom callout: https://www.andreashandel.com/posts/2023-06-13-custom-callouts-quarto/

# customizing callouts in SCSS feature request: https://github.com/quarto-dev/quarto-cli/discussions/10024

# customizing callout icons: https://github.com/quarto-dev/quarto-cli/issues/844#issuecomment-1779437411

# customizing callout icons: https://github.com/saforem2/lattice23/blob/main/css/callouts.css

# scaling slides: https://github.com/quarto-dev/quarto-cli/discussions/1840

# creating grid layout feature request: https://github.com/quarto-dev/quarto-cli/discussions/6166

# changing {leaflet} icon color conditionally: https://rstudio.github.io/leaflet/articles/markers.html

# changing {leaflet} icon color conditionally: https://stackoverflow.com/questions/72897404/r-r-leaflet-addawesomemarkers-how-to-set-conditional-colours-based-on-column-va

# resizing image while maintaining aspect ratio: https://stackoverflow.com/questions/3029422/how-to-auto-resize-an-image-while-maintaining-aspect-ratio?rq=2

# using fragments for images: https://github.com/quarto-dev/quarto-cli/discussions/9139

# avoiding build errors: https://github.com/orgs/community/discussions/76938

# creating self-contained file to publish: https://forum.posit.co/t/sharing-quarto-revealjs/147970/3

# escaping HTML so code shows in slides: https://quarto-webr.thecoatlessprofessor.com/tests/qwebr-test-escape-html-output-characters.html (did not work)

# example of slides with HTML code: https://github.com/spcanelon/slides/blob/main/2022-09-29-ccd-sips/index.qmd

```
